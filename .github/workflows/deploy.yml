name: Build, Test and Push to DockerHub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{secrets.DOCKERHUB_USERNAME}}

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Run Tests
      run: mvn test
      
    - name: Log in to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Backend Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.IMAGE_PREFIX }}/fullstack-backend:latest
          ${{ env.IMAGE_PREFIX }}/fullstack-backend:${{ github.sha }}
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        # Remove cache configuration to avoid the error
        # cache: 'npm'
        # cache-dependency-path: './frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        # Check if package-lock.json exists, if not create it first
        if [ ! -f "package-lock.json" ]; then
          echo "No package-lock.json found, generating one..."
          npm install
        else
          echo "package-lock.json found, using npm ci..."
          npm ci
        fi
      
    - name: Run tests
      run: |
        if [ -f "node_modules/.bin/react-scripts" ]; then
          npm test -- --watchAll=false --passWithNoTests
        else
          echo "No tests configured or dependencies not installed properly"
        fi
      
    - name: Build
      run: npm run build
      
    - name: Log in to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Frontend Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.IMAGE_PREFIX }}/fullstack-frontend:latest
          ${{ env.IMAGE_PREFIX }}/fullstack-frontend:${{ github.sha }}
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

  deployment:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deployment Ready
      run: 
        echo "Docker images have been built and pushed to DockerHub!"
        echo "Backend: successtech/fullstack-backend:latest"
        echo "Frontend: successtech/fullstack-frontend:latest"
        echo ""
        echo "To deploy manually on your VM, run:"
        echo "./scripts/deploy-k8s.sh"